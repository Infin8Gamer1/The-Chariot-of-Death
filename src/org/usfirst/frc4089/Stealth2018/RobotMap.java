// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4089.Stealth2018;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.sensors.PigeonIMU;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.can.BaseMotorController;
import com.ctre.phoenix.motorcontrol.*;
import com.ctre.phoenix.motion.*;

import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.networktables.NetworkTable;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	
    public static WPI_TalonSRX driveSRXDriveLR;
    public static WPI_TalonSRX driveSRXDriveLF;
    public static WPI_TalonSRX driveSRXDriveRR;
    public static WPI_TalonSRX driveSRXDriveRF;
    
    public static PigeonIMU pigeonIMU;
    
    public static Ultrasonic frontUltrasonic;

    public static NetworkTable netTable;
    
    public static PowerDistributionPanel PDP;
    
    
    public static void init() {
      driveSRXDriveLR = new WPI_TalonSRX(Constants.CANTalonSRXDriveLR);
      driveSRXDriveLF = new WPI_TalonSRX(Constants.CANTalonSRXDriveLF);
      driveSRXDriveRR = new WPI_TalonSRX(Constants.CANTalonSRXDriveRR);
      driveSRXDriveRF = new WPI_TalonSRX(Constants.CANTalonSRXDriveRF);

      pigeonIMU = new PigeonIMU(driveSRXDriveLR);
      pigeonIMU.setFusedHeading(0.0, 30);
      
      frontUltrasonic = new Ultrasonic(Constants.FrontUltrasonicPingChanel, Constants.FrontUltrasonicEchoChanel);
      
      netTable = NetworkTable.getTable("FRCRobot");
      
      PDP = new PowerDistributionPanel(Constants.CANPDP);
    }
    
    
    public static void SetUpTalonsForTele()
    {
      SetUpTalonForTele(driveSRXDriveLF);
      SetUpTalonForTele(driveSRXDriveRF);
      driveSRXDriveLR.set(ControlMode.Follower, Constants.CANTalonSRXDriveLF);
      driveSRXDriveRR.set(ControlMode.Follower, Constants.CANTalonSRXDriveRF);
      driveSRXDriveRF.setInverted(true);
      driveSRXDriveRR.setInverted(true);
      
    }
    
    private static void SetUpTalonForTele(WPI_TalonSRX talon) {
      talon.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, 0, Constants.kTimeoutMs);
      talon.setSensorPhase(true);

      /* set the peak and nominal outputs, 12V means full */
      talon.configNominalOutputForward(0, Constants.kTimeoutMs);
      talon.configNominalOutputReverse(0, Constants.kTimeoutMs);
      talon.configPeakOutputForward(1, Constants.kTimeoutMs);
      talon.configPeakOutputReverse(-1, Constants.kTimeoutMs);

      /* set closed loop gains in slot0 */
      talon.config_kF(Constants.kPIDLoopIdx, 0.34, Constants.kTimeoutMs);
      talon.config_kP(Constants.kPIDLoopIdx, 0.2, Constants.kTimeoutMs);
      talon.config_kI(Constants.kPIDLoopIdx, 0, Constants.kTimeoutMs);
      talon.config_kD(Constants.kPIDLoopIdx, 0, Constants.kTimeoutMs);

      talon.setSafetyEnabled(true);
      talon.setExpiration(Constants.kTimeoutMs);
    }

    public static void SetUpTalonsForAuto()
    {
      SetUpTalonForAuto(driveSRXDriveLF);
      SetUpTalonForAuto(driveSRXDriveRF);
      driveSRXDriveLR.set(ControlMode.Follower, Constants.CANTalonSRXDriveLF);
      driveSRXDriveRR.set(ControlMode.Follower, Constants.CANTalonSRXDriveRF);
      driveSRXDriveRF.setInverted(true);
      driveSRXDriveRR.setInverted(true);
    }
    
    private static void SetUpTalonForAuto(WPI_TalonSRX talon) {
      talon.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, 0, 10);
      talon.setSensorPhase(true); /* keep sensor and motor in phase */
      talon.configNeutralDeadband(Constants.kNeutralDeadband, Constants.kTimeoutMs);

      talon.config_kF(0, 0.076, Constants.kTimeoutMs);
      talon.config_kP(0, 2.000, Constants.kTimeoutMs);
      talon.config_kI(0, 0.0, Constants.kTimeoutMs);
      talon.config_kD(0,20.0, Constants.kTimeoutMs);

      //talon.configMotionProfileTrajectoryPeriod(20, Constants.kTimeoutMs); //Our profile uses 10 ms timing
      /* status 10 provides the trajectory target for motion profile AND motion magic */
      //talon.setStatusFramePeriod(StatusFrameEnhanced.Status_10_MotionMagic, 20, Constants.kTimeoutMs);
      
    }
   
}
