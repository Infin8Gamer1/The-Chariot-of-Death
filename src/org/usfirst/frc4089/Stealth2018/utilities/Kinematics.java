// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4089.Stealth2018.utilities;

import org.usfirst.frc4089.Stealth2018.Constants;
import org.usfirst.frc4089.Stealth2018.RobotMap;
import org.usfirst.frc4089.Stealth2018.commands.*;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Kinematics {
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private static final double kEpsilon = 1E-9;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    // deltX = 1/2(Vi+Vf)delt_t
    // Vf=Vi+adelt_t
    // deltX=Vi*delt_t+1/2a*deltaT^2
    //Vf^2=Vi^2+2a*deltX
    
    /**
     * calcs the change in distance provided the following parameters.
     * @param Vi
     * @param Vf
     * @param Ti
     * @param Tf
     * @return DeltaX as a double
     */
    public static double calDeltaX (double Vi, double Vf,double Ti, double Tf){
    	
    	double calcDeltaX = 0.5*(Vi+Vf)*(Tf-Ti);
    	
    	return calcDeltaX;
	}
    
    /**
     * calcs the final velocity provided the following parameters.
     * @param Vi
     * @param Ti
     * @param Tf
     * @return Vf as a double
     */
    public static double calcVft (double Vi, double acc, double Ti, double Tf){
    	double calcVf = Vi+acc*(Tf-Ti);
    	return calcVf;
    }
    /**
     * calc the change in distance provided the following parameters:
     * @param Vi
     * @param Ti
     * @param Tf
     * @return DeltaX as a double
     */
    public static double calcDeltaX (double Vi, double acc, double Ti, double Tf){
    	double calcDeltaX = Vi*(Tf-Ti)+0.5*acc*(Tf-Ti)*(Tf-Ti);
    	return calcDeltaX;
    }
    

    /**
     * calcs the final velicty provided the following parameters:
     * @param Vi
     * @param acc
     * @param Xi
     * @param Xf
     * @return Vf as double
     */
   
    public static double calcVfx (double Vi, double acc, double Xi, double Xf){
    	double calcVf= Math.sqrt(Vi*Vi+2*acc*(Xf-Xi));
    	return calcVf;
    }
    
    
}

